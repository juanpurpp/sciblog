generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_PRISMA_URL")
}

model Usuario {
  id                   Int       @id @default(autoincrement())
  nombre               String?
  apellido             String?
  email                String    @unique
  area_especializacion String
  organizacion         String?
  createdAt            DateTime  @default(now())
  updateAt             DateTime  @updatedAt
  temas                Tema[]
  estudios             Estudio[]
  guardados            Guardados[]
  comentarios          Comentario[]
  comentariosEstudio   ComentarioEstudio[]
  respuestas           Respuesta[]
  respuestasEstudio    RespuestaEstudio[]
  //useridfk Usuario @relation(fields: [id], references: [id])
}

model Guardados {
  id        Int      @id @default(autoincrement())
  userId    Int
  estudioId Int
  usuario   Usuario  @relation(fields: [userId], references: [id])
  estudio   Estudio  @relation(fields: [estudioId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}
model Dataset {
  id            Int      @id @default(autoincrement())
  titulo        String?
  descripcion   String
  fechaCreacion DateTime @default(now())
  tipo          String?
  userId        Int
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt
}

model Estudio {
  id              Int          @id @default(autoincrement())
  titulo          String       @db.VarChar(255)
  descripcion     String?
  comentarios     ComentarioEstudio[]
  tags            String[]
  enlace          String?
  userId          Int
  usuario_creador Usuario      @relation(fields: [userId], references: [id])
  guardados       Guardados[]
  createdAt       DateTime     @default(now()) //Fecha Creaci√≥n
  updateAt        DateTime     @updatedAt
}

model Comentario {
  id         Int         @id @default(autoincrement())
  Texto      String
  Fecha      DateTime
  temaId     Int?
  tema       Tema?       @relation(fields: [temaId], references: [id])
  usuarioId  Int
  usuario    Usuario     @relation(fields: [usuarioId], references: [id])
  respuestas Respuesta[]
  createdAt  DateTime    @default(now())
  updateAt   DateTime    @updatedAt
}

model Respuesta {
  id           Int        @id @default(autoincrement())
  content      String?
  comentarioId Int
  comentario   Comentario @relation(fields: [comentarioId], references: [id])
  usuarioId    Int
  usuario      Usuario     @relation(fields: [usuarioId], references: [id])
  createdAt    DateTime   @default(now())
  updateAt     DateTime   @updatedAt
}

model ComentarioEstudio {
  id         Int         @id @default(autoincrement())
  Texto      String
  estudioId  Int?
  estudio    Estudio?    @relation(fields: [estudioId], references: [id])
  usuarioId  Int
  usuario    Usuario     @relation(fields: [usuarioId], references: [id])
  respuestas RespuestaEstudio[]
  createdAt  DateTime    @default(now())
  updateAt   DateTime    @updatedAt
}

model RespuestaEstudio {
  id           Int        @id @default(autoincrement())
  content      String?
  comentarioId Int
  comentario   ComentarioEstudio @relation(fields: [comentarioId], references: [id])
  usuarioId    Int
  usuario      Usuario     @relation(fields: [usuarioId], references: [id])
  createdAt    DateTime   @default(now())
  updateAt     DateTime   @updatedAt
}

model Tema {
  id           Int          @id @default(autoincrement())
  nombre       String
  contenido    String?
  usuarioId    Int
  usuario_tema Usuario      @relation(fields: [usuarioId], references: [id])
  comentarios  Comentario[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}
