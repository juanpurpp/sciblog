generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_PRISMA_URL")
}

model Usuario {
  id       Int    @id @default(autoincrement())
  nombre    String?
  apellido  String?
  email    String @unique
  password String
  area_especializacion String
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
  dataSets Dataset[]
  temas Tema[]
    //useridfk Usuario @relation(fields: [id], references: [id])
}

model Dataset {
  id       Int    @id @default(autoincrement())
  titulo    String?
  descripcion String
  fechaCreacion DateTime @default(now())
  tipo String?
  userId  Int
  usuario_creador Usuario @relation(fields: [userId], references: [id])
  estudios Estudio[]
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Estudio{
  id       Int    @id @default(autoincrement())
  titulo    String   @db.VarChar(255)
  descripcion String?
  datasetId Int
  dataSet Dataset  @relation(fields: [datasetId], references: [id])
  comentarios Comentario[]
  tags Tag[]
  createdAt DateTime @default(now())//Fecha Creaci√≥n
  updateAt DateTime @updatedAt
}
model Comentario {
  id           Int    @id @default(autoincrement())
  Texto        String
  Fecha        DateTime
  estudioId    Int
  estudio Estudio @relation(fields:[estudioId], references: [id])
  respuestas Respuesta[]
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Respuesta {
  id Int @id  @default(autoincrement())
  content String?
  comentarioId  Int
  comentario Comentario @relation(fields:[comentarioId], references: [id])
  createdAt DateTime @default(now())
  updateAt DateTime  @updatedAt
}

model Tema {
  id        Int      @id @default(autoincrement())
  nombre    String
  contenido String?
  usuarioId Int
  usuario_tema Usuario @relation(fields: [usuarioId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}